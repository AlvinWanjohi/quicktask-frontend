{"ast":null,"code":"var _jsxFileName = \"/home/alvin/Documents/quicktask-frontend/src/pages/Notifications.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext } from \"react\";\nimport supabase from \"../utils/supabaseClient\";\nimport { AuthContext } from \"../context/AuthContext\"; // Ensure user authentication\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Notifications = ({\n  markAllAsRead\n}) => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  useEffect(() => {\n    if (!user) return; // Ensure user is logged in before fetching\n\n    const fetchNotifications = async () => {\n      try {\n        const {\n          data: taskUpdates,\n          error: taskError\n        } = await supabase.from(\"tasks\").select(\"*\").order(\"updated_at\", {\n          ascending: false\n        });\n        const {\n          data: bidUpdates,\n          error: bidError\n        } = await supabase.from(\"bids\").select(\"*\").order(\"updated_at\", {\n          ascending: false\n        });\n        const {\n          data: paymentUpdates,\n          error: paymentError\n        } = await supabase.from(\"payments\").select(\"*\").order(\"created_at\", {\n          ascending: false\n        });\n        const {\n          data: postUpdates,\n          error: postError\n        } = await supabase.from(\"posts\").select(\"*\").order(\"created_at\", {\n          ascending: false\n        });\n        if (taskError || bidError || paymentError || postError) {\n          console.error(\"Supabase errors:\", taskError, bidError, paymentError, postError);\n          return;\n        }\n        const formattedNotifications = [...(taskUpdates || []).map(task => ({\n          type: \"task\",\n          message: `Task \"${task.title}\" was ${task.status}`,\n          time: task.updated_at,\n          read: false\n        })), ...(bidUpdates || []).map(bid => ({\n          type: \"bid\",\n          message: `Your bid of $${bid.amount} on Task #${bid.task_id} is ${bid.status}`,\n          time: bid.updated_at,\n          read: false\n        })), ...(paymentUpdates || []).map(payment => ({\n          type: \"payment\",\n          message: `Payment of $${payment.amount} is ${payment.status}`,\n          time: payment.created_at,\n          read: false\n        })), ...(postUpdates || []).map(post => ({\n          type: \"post\",\n          message: `New post: \"${post.content.substring(0, 50)}...\"`,\n          time: post.created_at,\n          read: false\n        }))];\n        formattedNotifications.sort((a, b) => new Date(b.time) - new Date(a.time));\n        setNotifications(formattedNotifications);\n        setUnreadCount(formattedNotifications.filter(n => !n.read).length);\n      } catch (error) {\n        console.error(\"Error fetching notifications:\", error);\n      }\n    };\n    fetchNotifications();\n\n    // Supabase real-time updates\n    const taskSubscription = supabase.channel(\"tasks\").on(\"postgres_changes\", {\n      event: \"INSERT\",\n      schema: \"public\",\n      table: \"tasks\"\n    }, fetchNotifications).subscribe();\n    const bidSubscription = supabase.channel(\"bids\").on(\"postgres_changes\", {\n      event: \"INSERT\",\n      schema: \"public\",\n      table: \"bids\"\n    }, fetchNotifications).subscribe();\n    const paymentSubscription = supabase.channel(\"payments\").on(\"postgres_changes\", {\n      event: \"INSERT\",\n      schema: \"public\",\n      table: \"payments\"\n    }, fetchNotifications).subscribe();\n    const postSubscription = supabase.channel(\"posts\").on(\"postgres_changes\", {\n      event: \"INSERT\",\n      schema: \"public\",\n      table: \"posts\"\n    }, fetchNotifications).subscribe();\n    return () => {\n      supabase.removeChannel(taskSubscription);\n      supabase.removeChannel(bidSubscription);\n      supabase.removeChannel(paymentSubscription);\n      supabase.removeChannel(postSubscription);\n    };\n  }, [user]);\n  const markAsRead = () => {\n    setNotifications(notifications.map(n => ({\n      ...n,\n      read: true\n    })));\n    setUnreadCount(0);\n    if (markAllAsRead) markAllAsRead(); // Prevent crash if markAllAsRead is undefined\n  };\n  if (!user) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen bg-gray-100 p-6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"max-w-3xl mx-auto bg-white shadow-lg p-6 rounded-lg text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-2xl font-bold text-gray-800\",\n          children: \"Notifications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-500 mt-4\",\n          children: \"Please log in to view notifications.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-100 p-6\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-3xl mx-auto bg-white shadow-lg p-6 rounded-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold mb-4 text-gray-800\",\n        children: [\"Notifications (\", unreadCount, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: markAsRead,\n        className: \"mb-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition duration-300\",\n        children: \"Mark All as Read\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), notifications.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: notifications.map((notification, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: `p-4 mb-2 border rounded ${notification.read ? \"bg-gray-200\" : \"bg-yellow-50\"}`,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-gray-800\",\n            children: notification.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-xs text-gray-500\",\n            children: new Date(notification.time).toLocaleString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-500\",\n        children: \"No notifications yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s(Notifications, \"GSTdIk4QtpaGdHcrRdE1x7ZGIbA=\");\n_c = Notifications;\nexport default Notifications;\nvar _c;\n$RefreshReg$(_c, \"Notifications\");","map":{"version":3,"names":["React","useEffect","useState","useContext","supabase","AuthContext","jsxDEV","_jsxDEV","Notifications","markAllAsRead","_s","user","notifications","setNotifications","unreadCount","setUnreadCount","fetchNotifications","data","taskUpdates","error","taskError","from","select","order","ascending","bidUpdates","bidError","paymentUpdates","paymentError","postUpdates","postError","console","formattedNotifications","map","task","type","message","title","status","time","updated_at","read","bid","amount","task_id","payment","created_at","post","content","substring","sort","a","b","Date","filter","n","length","taskSubscription","channel","on","event","schema","table","subscribe","bidSubscription","paymentSubscription","postSubscription","removeChannel","markAsRead","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","notification","index","toLocaleString","_c","$RefreshReg$"],"sources":["/home/alvin/Documents/quicktask-frontend/src/pages/Notifications.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\nimport supabase from \"../utils/supabaseClient\";\nimport { AuthContext } from \"../context/AuthContext\"; // Ensure user authentication\n\nconst Notifications = ({ markAllAsRead }) => {\n  const { user } = useContext(AuthContext);\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n\n  useEffect(() => {\n    if (!user) return; // Ensure user is logged in before fetching\n\n    const fetchNotifications = async () => {\n      try {\n        const { data: taskUpdates, error: taskError } = await supabase\n          .from(\"tasks\")\n          .select(\"*\")\n          .order(\"updated_at\", { ascending: false });\n\n        const { data: bidUpdates, error: bidError } = await supabase\n          .from(\"bids\")\n          .select(\"*\")\n          .order(\"updated_at\", { ascending: false });\n\n        const { data: paymentUpdates, error: paymentError } = await supabase\n          .from(\"payments\")\n          .select(\"*\")\n          .order(\"created_at\", { ascending: false });\n\n        const { data: postUpdates, error: postError } = await supabase\n          .from(\"posts\")\n          .select(\"*\")\n          .order(\"created_at\", { ascending: false });\n\n        if (taskError || bidError || paymentError || postError) {\n          console.error(\"Supabase errors:\", taskError, bidError, paymentError, postError);\n          return;\n        }\n\n        const formattedNotifications = [\n          ...(taskUpdates || []).map(task => ({\n            type: \"task\",\n            message: `Task \"${task.title}\" was ${task.status}`,\n            time: task.updated_at,\n            read: false,\n          })),\n          ...(bidUpdates || []).map(bid => ({\n            type: \"bid\",\n            message: `Your bid of $${bid.amount} on Task #${bid.task_id} is ${bid.status}`,\n            time: bid.updated_at,\n            read: false,\n          })),\n          ...(paymentUpdates || []).map(payment => ({\n            type: \"payment\",\n            message: `Payment of $${payment.amount} is ${payment.status}`,\n            time: payment.created_at,\n            read: false,\n          })),\n          ...(postUpdates || []).map(post => ({\n            type: \"post\",\n            message: `New post: \"${post.content.substring(0, 50)}...\"`,\n            time: post.created_at,\n            read: false,\n          })),\n        ];\n\n        formattedNotifications.sort((a, b) => new Date(b.time) - new Date(a.time));\n        setNotifications(formattedNotifications);\n        setUnreadCount(formattedNotifications.filter(n => !n.read).length);\n      } catch (error) {\n        console.error(\"Error fetching notifications:\", error);\n      }\n    };\n\n    fetchNotifications();\n\n    // Supabase real-time updates\n    const taskSubscription = supabase\n      .channel(\"tasks\")\n      .on(\"postgres_changes\", { event: \"INSERT\", schema: \"public\", table: \"tasks\" }, fetchNotifications)\n      .subscribe();\n\n    const bidSubscription = supabase\n      .channel(\"bids\")\n      .on(\"postgres_changes\", { event: \"INSERT\", schema: \"public\", table: \"bids\" }, fetchNotifications)\n      .subscribe();\n\n    const paymentSubscription = supabase\n      .channel(\"payments\")\n      .on(\"postgres_changes\", { event: \"INSERT\", schema: \"public\", table: \"payments\" }, fetchNotifications)\n      .subscribe();\n\n    const postSubscription = supabase\n      .channel(\"posts\")\n      .on(\"postgres_changes\", { event: \"INSERT\", schema: \"public\", table: \"posts\" }, fetchNotifications)\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(taskSubscription);\n      supabase.removeChannel(bidSubscription);\n      supabase.removeChannel(paymentSubscription);\n      supabase.removeChannel(postSubscription);\n    };\n  }, [user]);\n\n  const markAsRead = () => {\n    setNotifications(notifications.map(n => ({ ...n, read: true })));\n    setUnreadCount(0);\n    if (markAllAsRead) markAllAsRead(); // Prevent crash if markAllAsRead is undefined\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-100 p-6\">\n        <div className=\"max-w-3xl mx-auto bg-white shadow-lg p-6 rounded-lg text-center\">\n          <h2 className=\"text-2xl font-bold text-gray-800\">Notifications</h2>\n          <p className=\"text-gray-500 mt-4\">Please log in to view notifications.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 p-6\">\n      <div className=\"max-w-3xl mx-auto bg-white shadow-lg p-6 rounded-lg\">\n        <h2 className=\"text-2xl font-bold mb-4 text-gray-800\">Notifications ({unreadCount})</h2>\n        <button\n          onClick={markAsRead}\n          className=\"mb-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition duration-300\"\n        >\n          Mark All as Read\n        </button>\n        {notifications.length > 0 ? (\n          <ul>\n            {notifications.map((notification, index) => (\n              <li\n                key={index}\n                className={`p-4 mb-2 border rounded ${\n                  notification.read ? \"bg-gray-200\" : \"bg-yellow-50\"\n                }`}\n              >\n                <p className=\"text-gray-800\">{notification.message}</p>\n                <p className=\"text-xs text-gray-500\">{new Date(notification.time).toLocaleString()}</p>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p className=\"text-gray-500\">No notifications yet.</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Notifications;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}