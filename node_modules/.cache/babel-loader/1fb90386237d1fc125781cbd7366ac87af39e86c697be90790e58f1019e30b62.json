{"ast":null,"code":"import apiClient from \"../utils/apiClient\";\nimport supabase from \"../utils/supabaseClient\"; // Assuming you have a Supabase client utility\n\n// Register a new user\nexport const registerUser = async userData => {\n  try {\n    const {\n      fullName,\n      email,\n      password\n    } = userData; // Removed profilePhoto & location\n\n    const {\n      data,\n      error: registerError\n    } = await supabase.auth.signUp({\n      email,\n      password\n    });\n    if (registerError) {\n      throw registerError;\n    }\n    const user = data === null || data === void 0 ? void 0 : data.user;\n    if (user !== null && user !== void 0 && user.id) {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        throw new Error(\"No token found, authentication required.\");\n      }\n      try {\n        const response = await fetch(`http://127.0.0.1:5000/users/${user.id}`, {\n          method: \"PUT\",\n          headers: {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${token}` // Include JWT token\n          },\n          body: JSON.stringify({\n            fullName,\n            // Ensure you're passing actual user details\n            email\n          }),\n          mode: \"cors\"\n        });\n        if (!response.ok) {\n          throw new Error(`Failed to update user: ${response.statusText}`);\n        }\n        const data = await response.json();\n        console.log(\"User updated successfully:\", data);\n      } catch (error) {\n        console.error(\"Error updating user:\", error);\n      }\n    }\n    return {\n      user,\n      message: \"Registration successful!\"\n    };\n  } catch (error) {\n    console.error(\"Registration Error:\", error.message);\n    throw error.message || {\n      message: \"Registration failed\"\n    };\n  }\n};","map":{"version":3,"names":["apiClient","supabase","registerUser","userData","fullName","email","password","data","error","registerError","auth","signUp","user","id","token","localStorage","getItem","Error","response","fetch","method","headers","body","JSON","stringify","mode","ok","statusText","json","console","log","message"],"sources":["/home/alvin/Documents/quicktask-frontend/src/services/authService.js"],"sourcesContent":["import apiClient from \"../utils/apiClient\";\nimport supabase from \"../utils/supabaseClient\"; // Assuming you have a Supabase client utility\n\n// Register a new user\nexport const registerUser = async (userData) => {\n  try {\n    const { fullName, email, password } = userData; // Removed profilePhoto & location\n\n    const { data, error: registerError } = await supabase.auth.signUp({\n      email,\n      password,\n    });\n\n    if (registerError) {\n      throw registerError;\n    }\n\n    const user = data?.user;\n\n    if (user?.id) {\n      const token = localStorage.getItem(\"token\");\n\n      if (!token) {\n        throw new Error(\"No token found, authentication required.\");\n      }\n\n      try {\n        const response = await fetch(`http://127.0.0.1:5000/users/${user.id}`, {\n          method: \"PUT\",\n          headers: {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${token}`, // Include JWT token\n          },\n          body: JSON.stringify({\n            fullName, // Ensure you're passing actual user details\n            email,\n          }),\n          mode: \"cors\",\n        });\n\n        if (!response.ok) {\n          throw new Error(`Failed to update user: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        console.log(\"User updated successfully:\", data);\n      } catch (error) {\n        console.error(\"Error updating user:\", error);\n      }\n    }\n\n    return { user, message: \"Registration successful!\" };\n  } catch (error) {\n    console.error(\"Registration Error:\", error.message);\n    throw error.message || { message: \"Registration failed\" };\n  }\n};\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,oBAAoB;AAC1C,OAAOC,QAAQ,MAAM,yBAAyB,CAAC,CAAC;;AAEhD;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC9C,IAAI;IACF,MAAM;MAAEC,QAAQ;MAAEC,KAAK;MAAEC;IAAS,CAAC,GAAGH,QAAQ,CAAC,CAAC;;IAEhD,MAAM;MAAEI,IAAI;MAAEC,KAAK,EAAEC;IAAc,CAAC,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAACC,MAAM,CAAC;MAChEN,KAAK;MACLC;IACF,CAAC,CAAC;IAEF,IAAIG,aAAa,EAAE;MACjB,MAAMA,aAAa;IACrB;IAEA,MAAMG,IAAI,GAAGL,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEK,IAAI;IAEvB,IAAIA,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEC,EAAE,EAAE;MACZ,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAE3C,IAAI,CAACF,KAAK,EAAE;QACV,MAAM,IAAIG,KAAK,CAAC,0CAA0C,CAAC;MAC7D;MAEA,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+BP,IAAI,CAACC,EAAE,EAAE,EAAE;UACrEO,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACP,QAAQ,EAAE,kBAAkB;YAC5B,cAAc,EAAE,kBAAkB;YAClC,eAAe,EAAE,UAAUP,KAAK,EAAE,CAAE;UACtC,CAAC;UACDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBpB,QAAQ;YAAE;YACVC;UACF,CAAC,CAAC;UACFoB,IAAI,EAAE;QACR,CAAC,CAAC;QAEF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;UAChB,MAAM,IAAIT,KAAK,CAAC,0BAA0BC,QAAQ,CAACS,UAAU,EAAE,CAAC;QAClE;QAEA,MAAMpB,IAAI,GAAG,MAAMW,QAAQ,CAACU,IAAI,CAAC,CAAC;QAClCC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEvB,IAAI,CAAC;MACjD,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdqB,OAAO,CAACrB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF;IAEA,OAAO;MAAEI,IAAI;MAAEmB,OAAO,EAAE;IAA2B,CAAC;EACtD,CAAC,CAAC,OAAOvB,KAAK,EAAE;IACdqB,OAAO,CAACrB,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAACuB,OAAO,CAAC;IACnD,MAAMvB,KAAK,CAACuB,OAAO,IAAI;MAAEA,OAAO,EAAE;IAAsB,CAAC;EAC3D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}