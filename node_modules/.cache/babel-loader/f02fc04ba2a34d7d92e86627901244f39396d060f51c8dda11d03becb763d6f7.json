{"ast":null,"code":"import supabase from \"../utils/supabaseClient\"; // Assuming you have a Supabase client utility\n\n// Register a new user\nexport const registerUser = async userData => {\n  try {\n    var _data$session;\n    const {\n      fullName,\n      email,\n      password\n    } = userData; // Removed profilePhoto & location\n\n    const {\n      data,\n      error: registerError\n    } = await supabase.auth.signUp({\n      email,\n      password\n    });\n    if (registerError) {\n      console.error(\"Supabase Registration Error:\", registerError.message);\n      throw registerError;\n    }\n    const user = data === null || data === void 0 ? void 0 : data.user;\n    const token = data === null || data === void 0 ? void 0 : (_data$session = data.session) === null || _data$session === void 0 ? void 0 : _data$session.access_token;\n    if (user !== null && user !== void 0 && user.id && token) {\n      localStorage.setItem(\"token\", token); // Store JWT token\n\n      try {\n        const response = await fetch(`http://127.0.0.1:5000/users/${user.id}`, {\n          method: \"PUT\",\n          headers: {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${token}` // Include JWT token\n          },\n          body: JSON.stringify({\n            fullName,\n            // Ensure you're passing actual user details\n            email\n          }),\n          mode: \"cors\"\n        });\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error(\"Failed to update user:\", response.status, errorText);\n          throw new Error(`Failed to update user: ${response.statusText}`);\n        }\n        const data = await response.json();\n        console.log(\"User updated successfully:\", data);\n      } catch (error) {\n        console.error(\"Error updating user:\", error.message);\n      }\n    }\n    return {\n      user,\n      message: \"Registration successful!\"\n    };\n  } catch (error) {\n    console.error(\"Registration Error:\", error.message);\n    throw error;\n  }\n};\n\n// Log in a user with provided credentials\nexport const loginUser = async credentials => {\n  try {\n    const {\n      email,\n      password\n    } = credentials;\n    const {\n      data,\n      error: loginError\n    } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    if (loginError) {\n      console.error(\"Supabase Login Error:\", loginError.message);\n      throw loginError;\n    }\n    const user = data === null || data === void 0 ? void 0 : data.user;\n    const session = data === null || data === void 0 ? void 0 : data.session;\n    if (session !== null && session !== void 0 && session.access_token) {\n      localStorage.setItem(\"token\", session.access_token);\n    }\n    return {\n      user,\n      access_token: session === null || session === void 0 ? void 0 : session.access_token\n    };\n  } catch (error) {\n    console.error(\"Login Error:\", error.message);\n    throw error.message || {\n      message: \"Login failed\"\n    };\n  }\n};\n\n// Log out the user\nexport const logoutUser = () => {\n  try {\n    supabase.auth.signOut();\n    localStorage.removeItem(\"token\");\n    console.log(\"User logged out successfully.\");\n  } catch (error) {\n    console.error(\"Logout Error:\", error.message);\n  }\n};\n\n// Verify user's email\nexport const verifyEmail = async token => {\n  try {\n    const response = await fetch(\"http://127.0.0.1:5000/auth/verify-email\", {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        token\n      })\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"Email verification failed:\", response.status, errorText);\n      throw new Error(`Email verification failed: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Email Verification Error:\", error.message);\n    throw error.message || {\n      message: \"Email verification failed\"\n    };\n  }\n};\n\n// Debugging getTasks function\nexport const getTasks = async () => {\n  try {\n    console.log(\"Fetching tasks from API:\", `${process.env.REACT_APP_API_URL}/tasks`);\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/tasks`, {\n      method: \"GET\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"Failed to fetch tasks:\", response.status, errorText);\n      throw new Error(`Server responded with ${response.status} - ${errorText}`);\n    }\n    const tasks = await response.json();\n    console.log(\"Tasks fetched successfully:\", tasks);\n    return tasks;\n  } catch (error) {\n    console.error(\"Error fetching tasks:\", error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["supabase","registerUser","userData","_data$session","fullName","email","password","data","error","registerError","auth","signUp","console","message","user","token","session","access_token","id","localStorage","setItem","response","fetch","method","headers","body","JSON","stringify","mode","ok","errorText","text","status","Error","statusText","json","log","loginUser","credentials","loginError","signInWithPassword","logoutUser","signOut","removeItem","verifyEmail","getTasks","process","env","REACT_APP_API_URL","tasks"],"sources":["/home/alvin/Documents/quicktask-frontend/src/services/authService.js"],"sourcesContent":["import supabase from \"../utils/supabaseClient\"; // Assuming you have a Supabase client utility\n\n// Register a new user\nexport const registerUser = async (userData) => {\n  try {\n    const { fullName, email, password } = userData; // Removed profilePhoto & location\n\n    const { data, error: registerError } = await supabase.auth.signUp({\n      email,\n      password,\n    });\n\n    if (registerError) {\n      console.error(\"Supabase Registration Error:\", registerError.message);\n      throw registerError;\n    }\n\n    const user = data?.user;\n    const token = data?.session?.access_token;\n\n    if (user?.id && token) {\n      localStorage.setItem(\"token\", token); // Store JWT token\n\n      try {\n        const response = await fetch(`http://127.0.0.1:5000/users/${user.id}`, {\n          method: \"PUT\",\n          headers: {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${token}`, // Include JWT token\n          },\n          body: JSON.stringify({\n            fullName, // Ensure you're passing actual user details\n            email,\n          }),\n          mode: \"cors\",\n        });\n\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error(\"Failed to update user:\", response.status, errorText);\n          throw new Error(`Failed to update user: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        console.log(\"User updated successfully:\", data);\n      } catch (error) {\n        console.error(\"Error updating user:\", error.message);\n      }\n    }\n\n    return { user, message: \"Registration successful!\" };\n  } catch (error) {\n    console.error(\"Registration Error:\", error.message);\n    throw error;\n  }\n};\n\n// Log in a user with provided credentials\nexport const loginUser = async (credentials) => {\n  try {\n    const { email, password } = credentials;\n    const { data, error: loginError } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n\n    if (loginError) {\n      console.error(\"Supabase Login Error:\", loginError.message);\n      throw loginError;\n    }\n\n    const user = data?.user;\n    const session = data?.session;\n\n    if (session?.access_token) {\n      localStorage.setItem(\"token\", session.access_token);\n    }\n\n    return { user, access_token: session?.access_token };\n  } catch (error) {\n    console.error(\"Login Error:\", error.message);\n    throw error.message || { message: \"Login failed\" };\n  }\n};\n\n// Log out the user\nexport const logoutUser = () => {\n  try {\n    supabase.auth.signOut();\n    localStorage.removeItem(\"token\");\n    console.log(\"User logged out successfully.\");\n  } catch (error) {\n    console.error(\"Logout Error:\", error.message);\n  }\n};\n\n// Verify user's email\nexport const verifyEmail = async (token) => {\n  try {\n    const response = await fetch(\"http://127.0.0.1:5000/auth/verify-email\", {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ token }),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"Email verification failed:\", response.status, errorText);\n      throw new Error(`Email verification failed: ${response.statusText}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(\"Email Verification Error:\", error.message);\n    throw error.message || { message: \"Email verification failed\" };\n  }\n};\n\n// Debugging getTasks function\nexport const getTasks = async () => {\n  try {\n    console.log(\"Fetching tasks from API:\", `${process.env.REACT_APP_API_URL}/tasks`);\n\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/tasks`, {\n      method: \"GET\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"Failed to fetch tasks:\", response.status, errorText);\n      throw new Error(`Server responded with ${response.status} - ${errorText}`);\n    }\n\n    const tasks = await response.json();\n    console.log(\"Tasks fetched successfully:\", tasks);\n    return tasks;\n  } catch (error) {\n    console.error(\"Error fetching tasks:\", error.message);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}