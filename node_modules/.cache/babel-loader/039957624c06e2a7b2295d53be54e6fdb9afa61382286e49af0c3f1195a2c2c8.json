{"ast":null,"code":"var _jsxFileName = \"/home/alvin/Documents/quicktask-frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { registerUser, loginUser, logoutUser } from \"../services/authService\";\n// src/context/AuthContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Create the auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Auth Provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is logged in on component mount\n    checkUserLoggedIn();\n  }, []);\n\n  // Function to check if user is logged in\n  const checkUserLoggedIn = async () => {\n    try {\n      // Check for token in localStorage\n      const token = localStorage.getItem('authToken');\n      if (token) {\n        // In a real app, you would validate the token with your backend\n        // For now, we'll just try to parse the user from localStorage if it exists\n        const storedUser = localStorage.getItem('user');\n        if (storedUser) {\n          setUser(JSON.parse(storedUser));\n        }\n      }\n    } catch (error) {\n      console.error('Failed to check authentication status:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Login function\n  const login = async credentials => {\n    try {\n      // In a real app, this would be an API call to your backend\n      // For demonstration, we'll simulate a successful login\n\n      // Example API call (replace with your actual API endpoint)\n      // const response = await fetch('/api/login', {\n      //   method: 'POST',\n      //   headers: { 'Content-Type': 'application/json' },\n      //   body: JSON.stringify(credentials)\n      // });\n      // const data = await response.json();\n\n      // Simulate successful login\n      const mockUser = {\n        id: '123',\n        name: credentials.email.split('@')[0],\n        // Use part of email as name\n        email: credentials.email\n      };\n      const mockToken = 'mock-jwt-token';\n\n      // Save to localStorage\n      localStorage.setItem('authToken', mockToken);\n      localStorage.setItem('user', JSON.stringify(mockUser));\n\n      // Update state\n      setUser(mockUser);\n      return {\n        success: true,\n        user: mockUser\n      };\n    } catch (error) {\n      console.error('Login failed:', error);\n      return {\n        success: false,\n        error: error.message || 'Login failed'\n      };\n    }\n  };\n\n  // Logout function\n  const handleLogout = () => {\n    // Remove auth data from localStorage\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n\n    // Update state\n    setUser(null);\n  };\n\n  // Register function\n  const register = async userData => {\n    try {\n      // In a real app, this would be an API call to your backend\n      // For demonstration, we'll simulate a successful registration\n\n      // Example API call (replace with your actual API endpoint)\n      // const response = await fetch('/api/register', {\n      //   method: 'POST',\n      //   headers: { 'Content-Type': 'application/json' },\n      //   body: JSON.stringify(userData)\n      // });\n      // const data = await response.json();\n\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Registration failed:', error);\n      return {\n        success: false,\n        error: error.message || 'Registration failed'\n      };\n    }\n  };\n\n  // Create the context value\n  const value = {\n    user,\n    loading,\n    login,\n    handleLogout,\n    register\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the auth context\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["registerUser","loginUser","logoutUser","React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","checkUserLoggedIn","token","localStorage","getItem","storedUser","JSON","parse","error","console","login","credentials","mockUser","id","name","email","split","mockToken","setItem","stringify","success","message","handleLogout","removeItem","register","userData","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/home/alvin/Documents/quicktask-frontend/src/context/AuthContext.js"],"sourcesContent":["import { registerUser, loginUser, logoutUser } from \"../services/authService\";\n// src/context/AuthContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Create the auth context\nconst AuthContext = createContext();\n\n// Auth Provider component\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if user is logged in on component mount\n    checkUserLoggedIn();\n  }, []);\n\n  // Function to check if user is logged in\n  const checkUserLoggedIn = async () => {\n    try {\n      // Check for token in localStorage\n      const token = localStorage.getItem('authToken');\n      \n      if (token) {\n        // In a real app, you would validate the token with your backend\n        // For now, we'll just try to parse the user from localStorage if it exists\n        const storedUser = localStorage.getItem('user');\n        if (storedUser) {\n          setUser(JSON.parse(storedUser));\n        }\n      }\n    } catch (error) {\n      console.error('Failed to check authentication status:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Login function\n  const login = async (credentials) => {\n    try {\n      // In a real app, this would be an API call to your backend\n      // For demonstration, we'll simulate a successful login\n      \n      // Example API call (replace with your actual API endpoint)\n      // const response = await fetch('/api/login', {\n      //   method: 'POST',\n      //   headers: { 'Content-Type': 'application/json' },\n      //   body: JSON.stringify(credentials)\n      // });\n      // const data = await response.json();\n      \n      // Simulate successful login\n      const mockUser = {\n        id: '123',\n        name: credentials.email.split('@')[0], // Use part of email as name\n        email: credentials.email\n      };\n      \n      const mockToken = 'mock-jwt-token';\n      \n      // Save to localStorage\n      localStorage.setItem('authToken', mockToken);\n      localStorage.setItem('user', JSON.stringify(mockUser));\n      \n      // Update state\n      setUser(mockUser);\n      return { success: true, user: mockUser };\n    } catch (error) {\n      console.error('Login failed:', error);\n      return { success: false, error: error.message || 'Login failed' };\n    }\n  };\n\n  // Logout function\n  const handleLogout = () => {\n    // Remove auth data from localStorage\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n    \n    // Update state\n    setUser(null);\n  };\n\n  // Register function\n  const register = async (userData) => {\n    try {\n      // In a real app, this would be an API call to your backend\n      // For demonstration, we'll simulate a successful registration\n      \n      // Example API call (replace with your actual API endpoint)\n      // const response = await fetch('/api/register', {\n      //   method: 'POST',\n      //   headers: { 'Content-Type': 'application/json' },\n      //   body: JSON.stringify(userData)\n      // });\n      // const data = await response.json();\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Registration failed:', error);\n      return { success: false, error: error.message || 'Registration failed' };\n    }\n  };\n\n  // Create the context value\n  const value = {\n    user,\n    loading,\n    login,\n    handleLogout,\n    register\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Custom hook to use the auth context\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}