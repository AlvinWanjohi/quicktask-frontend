{"ast":null,"code":"import apiClient from \"../utils/apiClient\";\nimport supabase from \"../utils/supabaseClient\"; // Assuming you have a Supabase client utility\n\n// Register a new user\nexport const registerUser = async userData => {\n  try {\n    const {\n      fullName,\n      email,\n      password\n    } = userData; // Removed profilePhoto & location\n\n    const {\n      data,\n      error: registerError\n    } = await supabase.auth.signUp({\n      email,\n      password\n    });\n    if (registerError) {\n      throw registerError;\n    }\n    const user = data === null || data === void 0 ? void 0 : data.user;\n    if (user !== null && user !== void 0 && user.id) {\n      await apiClient.put(`/users/${user.id}`, {\n        fullName\n      });\n    }\n    return {\n      user,\n      message: \"Registration successful!\"\n    };\n  } catch (error) {\n    console.error(\"Registration Error:\", error.message);\n    throw error.message || {\n      message: \"Registration failed\"\n    };\n  }\n};\n\n// Log in a user with provided credentials\nexport const loginUser = async credentials => {\n  try {\n    const {\n      email,\n      password\n    } = credentials;\n    const {\n      data,\n      error: loginError\n    } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    if (loginError) {\n      throw loginError;\n    }\n    const user = data === null || data === void 0 ? void 0 : data.user;\n    const session = data === null || data === void 0 ? void 0 : data.session;\n    if (session !== null && session !== void 0 && session.access_token) {\n      localStorage.setItem(\"token\", session.access_token);\n      apiClient.defaults.headers.common[\"Authorization\"] = `Bearer ${session.access_token}`;\n    }\n    return {\n      user,\n      access_token: session === null || session === void 0 ? void 0 : session.access_token\n    };\n  } catch (error) {\n    console.error(\"Login Error:\", error.message);\n    throw error.message || {\n      message: \"Login failed\"\n    };\n  }\n};\n\n// Social login (Google, Facebook, etc.)\nexport const socialLogin = async provider => {\n  try {\n    const {\n      data,\n      error: socialLoginError\n    } = await supabase.auth.signInWithOAuth({\n      provider\n    });\n    if (socialLoginError) {\n      throw socialLoginError;\n    }\n    const user = data === null || data === void 0 ? void 0 : data.user;\n    const session = data === null || data === void 0 ? void 0 : data.session;\n    if (session !== null && session !== void 0 && session.access_token) {\n      localStorage.setItem(\"token\", session.access_token);\n      apiClient.defaults.headers.common[\"Authorization\"] = `Bearer ${session.access_token}`;\n    }\n    return {\n      user,\n      access_token: session === null || session === void 0 ? void 0 : session.access_token\n    };\n  } catch (error) {\n    console.error(\"Social Login Error:\", error.message);\n    throw error.message || {\n      message: \"Social login failed\"\n    };\n  }\n};\n\n// Log out the user\nexport const logoutUser = () => {\n  supabase.auth.signOut();\n  localStorage.removeItem(\"token\");\n  delete apiClient.defaults.headers.common[\"Authorization\"];\n};\n\n// Verify user's email\nexport const verifyEmail = async token => {\n  try {\n    const response = await apiClient.post(\"/auth/verify-email\", {\n      token\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Email Verification Error:\", error.message);\n    throw error.message || {\n      message: \"Email verification failed\"\n    };\n  }\n};","map":{"version":3,"names":["apiClient","supabase","registerUser","userData","fullName","email","password","data","error","registerError","auth","signUp","user","id","put","message","console","loginUser","credentials","loginError","signInWithPassword","session","access_token","localStorage","setItem","defaults","headers","common","socialLogin","provider","socialLoginError","signInWithOAuth","logoutUser","signOut","removeItem","verifyEmail","token","response","post"],"sources":["/home/alvin/Documents/quicktask-frontend/src/services/authService.js"],"sourcesContent":["import apiClient from \"../utils/apiClient\";\nimport supabase from \"../utils/supabaseClient\"; // Assuming you have a Supabase client utility\n\n// Register a new user\nexport const registerUser = async (userData) => {\n  try {\n    const { fullName, email, password } = userData; // Removed profilePhoto & location\n\n    const { data, error: registerError } = await supabase.auth.signUp({\n      email,\n      password,\n    });\n\n    if (registerError) {\n      throw registerError;\n    }\n\n    const user = data?.user;\n\n    if (user?.id) {\n      await apiClient.put(`/users/${user.id}`, { fullName });\n    }\n\n    return { user, message: \"Registration successful!\" };\n  } catch (error) {\n    console.error(\"Registration Error:\", error.message);\n    throw error.message || { message: \"Registration failed\" };\n  }\n};\n\n// Log in a user with provided credentials\nexport const loginUser = async (credentials) => {\n  try {\n    const { email, password } = credentials;\n    const { data, error: loginError } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n\n    if (loginError) {\n      throw loginError;\n    }\n\n    const user = data?.user;\n    const session = data?.session;\n\n    if (session?.access_token) {\n      localStorage.setItem(\"token\", session.access_token);\n      apiClient.defaults.headers.common[\"Authorization\"] = `Bearer ${session.access_token}`;\n    }\n\n    return { user, access_token: session?.access_token };\n  } catch (error) {\n    console.error(\"Login Error:\", error.message);\n    throw error.message || { message: \"Login failed\" };\n  }\n};\n\n// Social login (Google, Facebook, etc.)\nexport const socialLogin = async (provider) => {\n  try {\n    const { data, error: socialLoginError } = await supabase.auth.signInWithOAuth({\n      provider,\n    });\n\n    if (socialLoginError) {\n      throw socialLoginError;\n    }\n\n    const user = data?.user;\n    const session = data?.session;\n\n    if (session?.access_token) {\n      localStorage.setItem(\"token\", session.access_token);\n      apiClient.defaults.headers.common[\"Authorization\"] = `Bearer ${session.access_token}`;\n    }\n\n    return { user, access_token: session?.access_token };\n  } catch (error) {\n    console.error(\"Social Login Error:\", error.message);\n    throw error.message || { message: \"Social login failed\" };\n  }\n};\n\n// Log out the user\nexport const logoutUser = () => {\n  supabase.auth.signOut();\n  localStorage.removeItem(\"token\");\n  delete apiClient.defaults.headers.common[\"Authorization\"];\n};\n\n// Verify user's email\nexport const verifyEmail = async (token) => {\n  try {\n    const response = await apiClient.post(\"/auth/verify-email\", { token });\n    return response.data;\n  } catch (error) {\n    console.error(\"Email Verification Error:\", error.message);\n    throw error.message || { message: \"Email verification failed\" };\n  }\n};\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,oBAAoB;AAC1C,OAAOC,QAAQ,MAAM,yBAAyB,CAAC,CAAC;;AAEhD;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC9C,IAAI;IACF,MAAM;MAAEC,QAAQ;MAAEC,KAAK;MAAEC;IAAS,CAAC,GAAGH,QAAQ,CAAC,CAAC;;IAEhD,MAAM;MAAEI,IAAI;MAAEC,KAAK,EAAEC;IAAc,CAAC,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAACC,MAAM,CAAC;MAChEN,KAAK;MACLC;IACF,CAAC,CAAC;IAEF,IAAIG,aAAa,EAAE;MACjB,MAAMA,aAAa;IACrB;IAEA,MAAMG,IAAI,GAAGL,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEK,IAAI;IAEvB,IAAIA,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEC,EAAE,EAAE;MACZ,MAAMb,SAAS,CAACc,GAAG,CAAC,UAAUF,IAAI,CAACC,EAAE,EAAE,EAAE;QAAET;MAAS,CAAC,CAAC;IACxD;IAEA,OAAO;MAAEQ,IAAI;MAAEG,OAAO,EAAE;IAA2B,CAAC;EACtD,CAAC,CAAC,OAAOP,KAAK,EAAE;IACdQ,OAAO,CAACR,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAACO,OAAO,CAAC;IACnD,MAAMP,KAAK,CAACO,OAAO,IAAI;MAAEA,OAAO,EAAE;IAAsB,CAAC;EAC3D;AACF,CAAC;;AAED;AACA,OAAO,MAAME,SAAS,GAAG,MAAOC,WAAW,IAAK;EAC9C,IAAI;IACF,MAAM;MAAEb,KAAK;MAAEC;IAAS,CAAC,GAAGY,WAAW;IACvC,MAAM;MAAEX,IAAI;MAAEC,KAAK,EAAEW;IAAW,CAAC,GAAG,MAAMlB,QAAQ,CAACS,IAAI,CAACU,kBAAkB,CAAC;MACzEf,KAAK;MACLC;IACF,CAAC,CAAC;IAEF,IAAIa,UAAU,EAAE;MACd,MAAMA,UAAU;IAClB;IAEA,MAAMP,IAAI,GAAGL,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEK,IAAI;IACvB,MAAMS,OAAO,GAAGd,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEc,OAAO;IAE7B,IAAIA,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEC,YAAY,EAAE;MACzBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,OAAO,CAACC,YAAY,CAAC;MACnDtB,SAAS,CAACyB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUN,OAAO,CAACC,YAAY,EAAE;IACvF;IAEA,OAAO;MAAEV,IAAI;MAAEU,YAAY,EAAED,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC;IAAa,CAAC;EACtD,CAAC,CAAC,OAAOd,KAAK,EAAE;IACdQ,OAAO,CAACR,KAAK,CAAC,cAAc,EAAEA,KAAK,CAACO,OAAO,CAAC;IAC5C,MAAMP,KAAK,CAACO,OAAO,IAAI;MAAEA,OAAO,EAAE;IAAe,CAAC;EACpD;AACF,CAAC;;AAED;AACA,OAAO,MAAMa,WAAW,GAAG,MAAOC,QAAQ,IAAK;EAC7C,IAAI;IACF,MAAM;MAAEtB,IAAI;MAAEC,KAAK,EAAEsB;IAAiB,CAAC,GAAG,MAAM7B,QAAQ,CAACS,IAAI,CAACqB,eAAe,CAAC;MAC5EF;IACF,CAAC,CAAC;IAEF,IAAIC,gBAAgB,EAAE;MACpB,MAAMA,gBAAgB;IACxB;IAEA,MAAMlB,IAAI,GAAGL,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEK,IAAI;IACvB,MAAMS,OAAO,GAAGd,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEc,OAAO;IAE7B,IAAIA,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEC,YAAY,EAAE;MACzBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,OAAO,CAACC,YAAY,CAAC;MACnDtB,SAAS,CAACyB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUN,OAAO,CAACC,YAAY,EAAE;IACvF;IAEA,OAAO;MAAEV,IAAI;MAAEU,YAAY,EAAED,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC;IAAa,CAAC;EACtD,CAAC,CAAC,OAAOd,KAAK,EAAE;IACdQ,OAAO,CAACR,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAACO,OAAO,CAAC;IACnD,MAAMP,KAAK,CAACO,OAAO,IAAI;MAAEA,OAAO,EAAE;IAAsB,CAAC;EAC3D;AACF,CAAC;;AAED;AACA,OAAO,MAAMiB,UAAU,GAAGA,CAAA,KAAM;EAC9B/B,QAAQ,CAACS,IAAI,CAACuB,OAAO,CAAC,CAAC;EACvBV,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC;EAChC,OAAOlC,SAAS,CAACyB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;AAC3D,CAAC;;AAED;AACA,OAAO,MAAMQ,WAAW,GAAG,MAAOC,KAAK,IAAK;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMrC,SAAS,CAACsC,IAAI,CAAC,oBAAoB,EAAE;MAAEF;IAAM,CAAC,CAAC;IACtE,OAAOC,QAAQ,CAAC9B,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdQ,OAAO,CAACR,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAACO,OAAO,CAAC;IACzD,MAAMP,KAAK,CAACO,OAAO,IAAI;MAAEA,OAAO,EAAE;IAA4B,CAAC;EACjE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}