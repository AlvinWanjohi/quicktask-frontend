{"ast":null,"code":"import apiClient from \"../utils/apiClient\";\nimport supabase from \"../utils/supabaseClient\"; // Assuming you have a Supabase client utility\n\n// Register a new user\nexport const registerUser = async userData => {\n  try {\n    const {\n      fullName,\n      email,\n      password,\n      profilePhoto,\n      location\n    } = userData;\n    const {\n      data,\n      error: registerError\n    } = await supabase.auth.signUp({\n      email,\n      password\n    });\n    if (registerError) {\n      throw registerError;\n    }\n    const user = data === null || data === void 0 ? void 0 : data.user;\n    if (profilePhoto && user !== null && user !== void 0 && user.id) {\n      const fileExt = profilePhoto.name.split(\".\").pop();\n      const filePath = `${user.id}/profile.${fileExt}`;\n      const {\n        data,\n        error: uploadError\n      } = await supabase.storage.from(\"avatars\").upload(filePath, profilePhoto);\n      if (uploadError) {\n        throw uploadError;\n      }\n      const profilePhotoUrl = data !== null && data !== void 0 && data.path ? `${supabase.storageUrl}/avatars/${data.path}` : null;\n      const {\n        error: updateError\n      } = await supabase.from(\"users\").update({\n        fullName,\n        location,\n        profilePhoto: profilePhotoUrl\n      }).eq(\"id\", user.id);\n      if (updateError) {\n        throw updateError;\n      }\n    }\n    if (user !== null && user !== void 0 && user.id) {\n      await apiClient.put(`/users/${user.id}`, {\n        profileCompleted: true\n      });\n    }\n    return {\n      user,\n      message: \"Registration successful!\"\n    };\n  } catch (error) {\n    console.error(\"Registration Error:\", error.message);\n    throw error.message || {\n      message: \"Registration failed\"\n    };\n  }\n};\n\n// Log in a user with provided credentials\nexport const loginUser = async credentials => {\n  try {\n    const {\n      email,\n      password\n    } = credentials;\n    const {\n      data,\n      error: loginError\n    } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    if (loginError) {\n      throw loginError;\n    }\n    const user = data === null || data === void 0 ? void 0 : data.user;\n    const session = data === null || data === void 0 ? void 0 : data.session;\n    if (session !== null && session !== void 0 && session.access_token) {\n      localStorage.setItem(\"token\", session.access_token);\n      apiClient.defaults.headers.common[\"Authorization\"] = `Bearer ${session.access_token}`;\n    }\n    return {\n      user,\n      access_token: session === null || session === void 0 ? void 0 : session.access_token\n    };\n  } catch (error) {\n    console.error(\"Login Error:\", error.message);\n    throw error.message || {\n      message: \"Login failed\"\n    };\n  }\n};\n\n// Social login (Google, Facebook, etc.)\nexport const socialLogin = async provider => {\n  try {\n    const {\n      data,\n      error: socialLoginError\n    } = await supabase.auth.signInWithOAuth({\n      provider\n    });\n    if (socialLoginError) {\n      throw socialLoginError;\n    }\n    const user = data === null || data === void 0 ? void 0 : data.user;\n    const session = data === null || data === void 0 ? void 0 : data.session;\n    if (session !== null && session !== void 0 && session.access_token) {\n      localStorage.setItem(\"token\", session.access_token);\n      apiClient.defaults.headers.common[\"Authorization\"] = `Bearer ${session.access_token}`;\n    }\n    return {\n      user,\n      access_token: session === null || session === void 0 ? void 0 : session.access_token\n    };\n  } catch (error) {\n    console.error(\"Social Login Error:\", error.message);\n    throw error.message || {\n      message: \"Social login failed\"\n    };\n  }\n};\n\n// Log out the user\nexport const logoutUser = () => {\n  supabase.auth.signOut();\n  localStorage.removeItem(\"token\");\n  delete apiClient.defaults.headers.common[\"Authorization\"];\n};\n\n// Verify user's email\nexport const verifyEmail = async token => {\n  try {\n    const response = await apiClient.post(\"/auth/verify-email\", {\n      token\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Email Verification Error:\", error.message);\n    throw error.message || {\n      message: \"Email verification failed\"\n    };\n  }\n};","map":{"version":3,"names":["apiClient","supabase","registerUser","userData","fullName","email","password","profilePhoto","location","data","error","registerError","auth","signUp","user","id","fileExt","name","split","pop","filePath","uploadError","storage","from","upload","profilePhotoUrl","path","storageUrl","updateError","update","eq","put","profileCompleted","message","console","loginUser","credentials","loginError","signInWithPassword","session","access_token","localStorage","setItem","defaults","headers","common","socialLogin","provider","socialLoginError","signInWithOAuth","logoutUser","signOut","removeItem","verifyEmail","token","response","post"],"sources":["/home/alvin/Documents/quicktask-frontend/src/services/authService.js"],"sourcesContent":["import apiClient from \"../utils/apiClient\";\nimport supabase from \"../utils/supabaseClient\"; // Assuming you have a Supabase client utility\n\n// Register a new user\nexport const registerUser = async (userData) => {\n  try {\n    const { fullName, email, password, profilePhoto, location } = userData;\n    const { data, error: registerError } = await supabase.auth.signUp({\n      email,\n      password,\n    });\n\n    if (registerError) {\n      throw registerError;\n    }\n\n    const user = data?.user;\n\n    if (profilePhoto && user?.id) {\n      const fileExt = profilePhoto.name.split(\".\").pop();\n      const filePath = `${user.id}/profile.${fileExt}`;\n      const { data, error: uploadError } = await supabase.storage\n        .from(\"avatars\")\n        .upload(filePath, profilePhoto);\n\n      if (uploadError) {\n        throw uploadError;\n      }\n\n      const profilePhotoUrl = data?.path\n        ? `${supabase.storageUrl}/avatars/${data.path}`\n        : null;\n\n      const { error: updateError } = await supabase\n        .from(\"users\")\n        .update({ fullName, location, profilePhoto: profilePhotoUrl })\n        .eq(\"id\", user.id);\n\n      if (updateError) {\n        throw updateError;\n      }\n    }\n\n    if (user?.id) {\n      await apiClient.put(`/users/${user.id}`, { profileCompleted: true });\n    }\n\n    return { user, message: \"Registration successful!\" };\n  } catch (error) {\n    console.error(\"Registration Error:\", error.message);\n    throw error.message || { message: \"Registration failed\" };\n  }\n};\n\n// Log in a user with provided credentials\nexport const loginUser = async (credentials) => {\n  try {\n    const { email, password } = credentials;\n    const { data, error: loginError } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n\n    if (loginError) {\n      throw loginError;\n    }\n\n    const user = data?.user;\n    const session = data?.session;\n\n    if (session?.access_token) {\n      localStorage.setItem(\"token\", session.access_token);\n      apiClient.defaults.headers.common[\"Authorization\"] = `Bearer ${session.access_token}`;\n    }\n\n    return { user, access_token: session?.access_token };\n  } catch (error) {\n    console.error(\"Login Error:\", error.message);\n    throw error.message || { message: \"Login failed\" };\n  }\n};\n\n// Social login (Google, Facebook, etc.)\nexport const socialLogin = async (provider) => {\n  try {\n    const { data, error: socialLoginError } = await supabase.auth.signInWithOAuth({\n      provider,\n    });\n\n    if (socialLoginError) {\n      throw socialLoginError;\n    }\n\n    const user = data?.user;\n    const session = data?.session;\n\n    if (session?.access_token) {\n      localStorage.setItem(\"token\", session.access_token);\n      apiClient.defaults.headers.common[\"Authorization\"] = `Bearer ${session.access_token}`;\n    }\n\n    return { user, access_token: session?.access_token };\n  } catch (error) {\n    console.error(\"Social Login Error:\", error.message);\n    throw error.message || { message: \"Social login failed\" };\n  }\n};\n\n// Log out the user\nexport const logoutUser = () => {\n  supabase.auth.signOut();\n  localStorage.removeItem(\"token\");\n  delete apiClient.defaults.headers.common[\"Authorization\"];\n};\n\n// Verify user's email\nexport const verifyEmail = async (token) => {\n  try {\n    const response = await apiClient.post(\"/auth/verify-email\", { token });\n    return response.data;\n  } catch (error) {\n    console.error(\"Email Verification Error:\", error.message);\n    throw error.message || { message: \"Email verification failed\" };\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}