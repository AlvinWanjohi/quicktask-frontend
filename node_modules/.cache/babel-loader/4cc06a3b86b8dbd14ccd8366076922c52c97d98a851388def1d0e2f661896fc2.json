{"ast":null,"code":"import supabase from \"../utils/supabaseClient\"; // Assuming you have a Supabase client utility\n\n// Register a new user\nexport const registerUser = async userData => {\n  try {\n    var _data$session;\n    const {\n      fullName,\n      email,\n      password\n    } = userData; // Removed profilePhoto & location\n\n    const {\n      data,\n      error: registerError\n    } = await supabase.auth.signUp({\n      email,\n      password\n    });\n    if (registerError) {\n      throw registerError;\n    }\n    const user = data === null || data === void 0 ? void 0 : data.user;\n    const token = data === null || data === void 0 ? void 0 : (_data$session = data.session) === null || _data$session === void 0 ? void 0 : _data$session.access_token;\n    if (user !== null && user !== void 0 && user.id && token) {\n      localStorage.setItem(\"token\", token); // Store JWT token\n\n      try {\n        const response = await fetch(`http://127.0.0.1:5000/users/${user.id}`, {\n          method: \"PUT\",\n          headers: {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${token}` // Include JWT token\n          },\n          body: JSON.stringify({\n            fullName,\n            // Ensure you're passing actual user details\n            email\n          }),\n          mode: \"cors\"\n        });\n        if (!response.ok) {\n          throw new Error(`Failed to update user: ${response.statusText}`);\n        }\n        const data = await response.json();\n        console.log(\"User updated successfully:\", data);\n      } catch (error) {\n        console.error(\"Error updating user:\", error);\n      }\n    }\n    return {\n      user,\n      message: \"Registration successful!\"\n    };\n  } catch (error) {\n    console.error(\"Registration Error:\", error.message);\n    throw error.messag;\n  }\n};\n\n// Log in a user with provided credentials\nexport const loginUser = async credentials => {\n  try {\n    const {\n      email,\n      password\n    } = credentials;\n    const {\n      data,\n      error: loginError\n    } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    if (loginError) {\n      throw loginError;\n    }\n    const user = data === null || data === void 0 ? void 0 : data.user;\n    const session = data === null || data === void 0 ? void 0 : data.session;\n    if (session !== null && session !== void 0 && session.access_token) {\n      localStorage.setItem(\"token\", session.access_token);\n    }\n    return {\n      user,\n      access_token: session === null || session === void 0 ? void 0 : session.access_token\n    };\n  } catch (error) {\n    console.error(\"Login Error:\", error.message);\n    throw error.message || {\n      message: \"Login failed\"\n    };\n  }\n};\n\n// Log out the user\nexport const logoutUser = () => {\n  try {\n    supabase.auth.signOut();\n    localStorage.removeItem(\"token\");\n    console.log(\"User logged out successfully.\");\n  } catch (error) {\n    console.error(\"Logout Error:\", error.message);\n  }\n};\n\n// Verify user's email\nexport const verifyEmail = async token => {\n  try {\n    const response = await fetch(\"http://127.0.0.1:5000/auth/verify-email\", {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        token\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Email verification failed: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Email Verification Error:\", error.message);\n    throw error.message || {\n      message: \"Email verification failed\"\n    };\n  }\n};","map":{"version":3,"names":["supabase","registerUser","userData","_data$session","fullName","email","password","data","error","registerError","auth","signUp","user","token","session","access_token","id","localStorage","setItem","response","fetch","method","headers","body","JSON","stringify","mode","ok","Error","statusText","json","console","log","message","messag","loginUser","credentials","loginError","signInWithPassword","logoutUser","signOut","removeItem","verifyEmail"],"sources":["/home/alvin/Documents/quicktask-frontend/src/services/authService.js"],"sourcesContent":["import supabase from \"../utils/supabaseClient\"; // Assuming you have a Supabase client utility\n\n// Register a new user\nexport const registerUser = async (userData) => {\n  try {\n    const { fullName, email, password } = userData; // Removed profilePhoto & location\n\n    const { data, error: registerError } = await supabase.auth.signUp({\n      email,\n      password,\n    });\n\n    if (registerError) {\n      throw registerError;\n    }\n\n    const user = data?.user;\n    const token = data?.session?.access_token;\n\n    if (user?.id && token) {\n      localStorage.setItem(\"token\", token); // Store JWT token\n\n      try {\n        const response = await fetch(`http://127.0.0.1:5000/users/${user.id}`, {\n          method: \"PUT\",\n          headers: {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${token}`, // Include JWT token\n          },\n          body: JSON.stringify({\n            fullName, // Ensure you're passing actual user details\n            email,\n          }),\n          mode: \"cors\",\n        });\n\n        if (!response.ok) {\n          throw new Error(`Failed to update user: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        console.log(\"User updated successfully:\", data);\n      } catch (error) {\n        console.error(\"Error updating user:\", error);\n      }\n    }\n\n    return { user, message: \"Registration successful!\" };\n  } catch (error) {\n    console.error(\"Registration Error:\", error.message);\n    throw error.messag\n  }\n};\n\n// Log in a user with provided credentials\nexport const loginUser = async (credentials) => {\n  try {\n    const { email, password } = credentials;\n    const { data, error: loginError } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n\n    if (loginError) {\n      throw loginError;\n    }\n\n    const user = data?.user;\n    const session = data?.session;\n\n    if (session?.access_token) {\n      localStorage.setItem(\"token\", session.access_token);\n    }\n\n    return { user, access_token: session?.access_token };\n  } catch (error) {\n    console.error(\"Login Error:\", error.message);\n    throw error.message || { message: \"Login failed\" };\n  }\n};\n\n// Log out the user\nexport const logoutUser = () => {\n  try {\n    supabase.auth.signOut();\n    localStorage.removeItem(\"token\");\n    console.log(\"User logged out successfully.\");\n  } catch (error) {\n    console.error(\"Logout Error:\", error.message);\n  }\n};\n\n// Verify user's email\nexport const verifyEmail = async (token) => {\n  try {\n    const response = await fetch(\"http://127.0.0.1:5000/auth/verify-email\", {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ token }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Email verification failed: ${response.statusText}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(\"Email Verification Error:\", error.message);\n    throw error.message || { message: \"Email verification failed\" };\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}