{"ast":null,"code":"var _jsxFileName = \"/home/alvin/Documents/quicktask-frontend/src/context/TaskContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from \"react\";\nimport { getTasks } from \"../services/taskService\";\nimport { useAuth } from \"../context/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TaskContext = /*#__PURE__*/createContext();\nexport const TaskProvider = ({\n  children\n}) => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const {\n    user\n  } = useAuth(); // Retrieve the logged-in user\n\n  // Only fetch tasks when the user is logged in\n  useEffect(() => {\n    if (user) {\n      fetchTasks();\n    }\n  }, [user]);\n  const fetchTasks = async () => {\n    try {\n      const data = await getTasks();\n      setTasks(data);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: {\n      tasks,\n      fetchTasks\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskProvider, \"gX+uwBj8H6TN+tyNNxmDlLie1EM=\", false, function () {\n  return [useAuth];\n});\n_c = TaskProvider;\nvar _c;\n$RefreshReg$(_c, \"TaskProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","getTasks","useAuth","jsxDEV","_jsxDEV","TaskContext","TaskProvider","children","_s","tasks","setTasks","user","fetchTasks","data","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/alvin/Documents/quicktask-frontend/src/context/TaskContext.js"],"sourcesContent":["import { createContext, useState, useEffect } from \"react\";\nimport { getTasks } from \"../services/taskService\"; \nimport { useAuth } from \"../context/AuthContext\";\n\nexport const TaskContext = createContext();\n\nexport const TaskProvider = ({ children }) => {\n  const [tasks, setTasks] = useState([]);\n  const { user } = useAuth(); // Retrieve the logged-in user\n\n  // Only fetch tasks when the user is logged in\n  useEffect(() => {\n    if (user) {\n      fetchTasks();\n    }\n  }, [user]);\n\n  const fetchTasks = async () => {\n    try {\n      const data = await getTasks(); \n      setTasks(data);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n    }\n  };\n\n  return (\n    <TaskContext.Provider value={{ tasks, fetchTasks }}>\n      {children}\n    </TaskContext.Provider>\n  );\n};\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC1D,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,SAASC,OAAO,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,OAAO,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM;IAAEY;EAAK,CAAC,GAAGT,OAAO,CAAC,CAAC,CAAC,CAAC;;EAE5B;EACAF,SAAS,CAAC,MAAM;IACd,IAAIW,IAAI,EAAE;MACRC,UAAU,CAAC,CAAC;IACd;EACF,CAAC,EAAE,CAACD,IAAI,CAAC,CAAC;EAEV,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAAC,CAAC;MAC7BS,QAAQ,CAACG,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAED,oBACEV,OAAA,CAACC,WAAW,CAACW,QAAQ;IAACC,KAAK,EAAE;MAAER,KAAK;MAAEG;IAAW,CAAE;IAAAL,QAAA,EAChDA;EAAQ;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACb,EAAA,CAzBWF,YAAY;EAAA,QAENJ,OAAO;AAAA;AAAAoB,EAAA,GAFbhB,YAAY;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}