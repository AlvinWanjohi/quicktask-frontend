{"ast":null,"code":"import apiClient from \"../utils/apiClient\";\nimport supabase from \"../utils/supabaseClient\"; // Assuming you have a Supabase client utility\n\n// Register a new user\nexport const registerUser = async userData => {\n  try {\n    // Register the user with Supabase\n    const {\n      fullName,\n      email,\n      password,\n      profilePhoto,\n      location\n    } = userData;\n    const {\n      user,\n      error: registerError\n    } = await supabase.auth.signUp({\n      email,\n      password\n    });\n    if (registerError) {\n      throw registerError;\n    }\n\n    // Handle profile photo upload\n    if (profilePhoto) {\n      const fileExt = profilePhoto.name.split(\".\").pop();\n      const filePath = `${user.id}/profile.${fileExt}`;\n      const {\n        data,\n        error: uploadError\n      } = await supabase.storage.from(\"avatars\").upload(filePath, profilePhoto);\n      if (uploadError) {\n        throw uploadError;\n      }\n\n      // Save the profile photo URL\n      const profilePhotoUrl = data !== null && data !== void 0 && data.path ? `${supabase.storageUrl}/avatars/${data.path}` : null;\n\n      // Update user metadata with profile photo and location\n      const {\n        error: updateError\n      } = await supabase.from(\"users\").update({\n        fullName,\n        location,\n        profilePhoto: profilePhotoUrl\n      }).eq(\"id\", user.id);\n      if (updateError) {\n        throw updateError;\n      }\n    }\n\n    // After successful registration, mark the profile as completed\n    await apiClient.put(`/users/${user.id}`, {\n      profileCompleted: true\n    });\n    return {\n      user,\n      message: \"Registration successful!\"\n    };\n  } catch (error) {\n    var _error$response, _error$response2;\n    // Log the error to the console and throw a detailed error message\n    console.error(\"Registration Error:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n      message: \"Registration failed\"\n    };\n  }\n};\n\n// Log in a user with provided credentials\nexport const loginUser = async credentials => {\n  try {\n    // Log in using Supabase\n    const {\n      email,\n      password\n    } = credentials;\n    const {\n      user,\n      session,\n      error: loginError\n    } = await supabase.auth.signIn({\n      email,\n      password\n    });\n    if (loginError) {\n      throw loginError;\n    }\n\n    // Store the session (access token) in localStorage\n    localStorage.setItem(\"token\", session.access_token);\n    apiClient.defaults.headers.common[\"Authorization\"] = `Bearer ${session.access_token}`;\n    return {\n      user,\n      access_token: session.access_token\n    };\n  } catch (error) {\n    var _error$response3, _error$response4;\n    // Log the error and throw a detailed error message\n    console.error(\"Login Error:\", ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || {\n      message: \"Login failed\"\n    };\n  }\n};\n\n// Handle social login using a provider (e.g., Google, Facebook)\nexport const socialLogin = async provider => {\n  try {\n    const {\n      user,\n      session,\n      error: socialLoginError\n    } = await supabase.auth.signIn({\n      provider\n    });\n    if (socialLoginError) {\n      throw socialLoginError;\n    }\n\n    // Store the session (access token) in localStorage\n    localStorage.setItem(\"token\", session.access_token);\n    apiClient.defaults.headers.common[\"Authorization\"] = `Bearer ${session.access_token}`;\n    return {\n      user,\n      access_token: session.access_token\n    };\n  } catch (error) {\n    var _error$response5, _error$response6;\n    // Log the error and throw a detailed error message\n    console.error(\"Social Login Error:\", ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n    throw ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || {\n      message: \"Social login failed\"\n    };\n  }\n};\n\n// Log out the user and clear the session\nexport const logoutUser = () => {\n  // Log out from Supabase\n  supabase.auth.signOut();\n  // Clear session data from localStorage\n  localStorage.removeItem(\"token\");\n  delete apiClient.defaults.headers.common[\"Authorization\"];\n};\n\n// Verify user's email using a token\nexport const verifyEmail = async token => {\n  try {\n    const response = await apiClient.post(\"/auth/verify-email\", {\n      token\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response7, _error$response8;\n    // Log the error and throw a detailed error message\n    console.error(\"Email Verification Error:\", ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || error.message);\n    throw ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data) || {\n      message: \"Email verification failed\"\n    };\n  }\n};","map":{"version":3,"names":["apiClient","supabase","registerUser","userData","fullName","email","password","profilePhoto","location","user","error","registerError","auth","signUp","fileExt","name","split","pop","filePath","id","data","uploadError","storage","from","upload","profilePhotoUrl","path","storageUrl","updateError","update","eq","put","profileCompleted","message","_error$response","_error$response2","console","response","loginUser","credentials","session","loginError","signIn","localStorage","setItem","access_token","defaults","headers","common","_error$response3","_error$response4","socialLogin","provider","socialLoginError","_error$response5","_error$response6","logoutUser","signOut","removeItem","verifyEmail","token","post","_error$response7","_error$response8"],"sources":["/home/alvin/Documents/quicktask-frontend/src/services/authService.js"],"sourcesContent":["import apiClient from \"../utils/apiClient\";\nimport supabase from \"../utils/supabaseClient\"; // Assuming you have a Supabase client utility\n\n// Register a new user\nexport const registerUser = async (userData) => {\n  try {\n    // Register the user with Supabase\n    const { fullName, email, password, profilePhoto, location } = userData;\n    const { user, error: registerError } = await supabase.auth.signUp({\n      email,\n      password,\n    });\n\n    if (registerError) {\n      throw registerError;\n    }\n\n    // Handle profile photo upload\n    if (profilePhoto) {\n      const fileExt = profilePhoto.name.split(\".\").pop();\n      const filePath = `${user.id}/profile.${fileExt}`;\n      const { data, error: uploadError } = await supabase.storage\n        .from(\"avatars\")\n        .upload(filePath, profilePhoto);\n\n      if (uploadError) {\n        throw uploadError;\n      }\n\n      // Save the profile photo URL\n      const profilePhotoUrl = data?.path\n        ? `${supabase.storageUrl}/avatars/${data.path}`\n        : null;\n\n      // Update user metadata with profile photo and location\n      const { error: updateError } = await supabase\n        .from(\"users\")\n        .update({ fullName, location, profilePhoto: profilePhotoUrl })\n        .eq(\"id\", user.id);\n\n      if (updateError) {\n        throw updateError;\n      }\n    }\n\n    // After successful registration, mark the profile as completed\n    await apiClient.put(`/users/${user.id}`, { profileCompleted: true });\n\n    return { user, message: \"Registration successful!\" };\n  } catch (error) {\n    // Log the error to the console and throw a detailed error message\n    console.error(\"Registration Error:\", error.response?.data || error.message);\n    throw error.response?.data || { message: \"Registration failed\" };\n  }\n};\n\n// Log in a user with provided credentials\nexport const loginUser = async (credentials) => {\n  try {\n    // Log in using Supabase\n    const { email, password } = credentials;\n    const { user, session, error: loginError } = await supabase.auth.signIn({\n      email,\n      password,\n    });\n\n    if (loginError) {\n      throw loginError;\n    }\n\n    // Store the session (access token) in localStorage\n    localStorage.setItem(\"token\", session.access_token);\n    apiClient.defaults.headers.common[\"Authorization\"] = `Bearer ${session.access_token}`;\n\n    return { user, access_token: session.access_token };\n  } catch (error) {\n    // Log the error and throw a detailed error message\n    console.error(\"Login Error:\", error.response?.data || error.message);\n    throw error.response?.data || { message: \"Login failed\" };\n  }\n};\n\n// Handle social login using a provider (e.g., Google, Facebook)\nexport const socialLogin = async (provider) => {\n  try {\n    const { user, session, error: socialLoginError } = await supabase.auth.signIn({\n      provider,\n    });\n\n    if (socialLoginError) {\n      throw socialLoginError;\n    }\n\n    // Store the session (access token) in localStorage\n    localStorage.setItem(\"token\", session.access_token);\n    apiClient.defaults.headers.common[\"Authorization\"] = `Bearer ${session.access_token}`;\n\n    return { user, access_token: session.access_token };\n  } catch (error) {\n    // Log the error and throw a detailed error message\n    console.error(\"Social Login Error:\", error.response?.data || error.message);\n    throw error.response?.data || { message: \"Social login failed\" };\n  }\n};\n\n// Log out the user and clear the session\nexport const logoutUser = () => {\n  // Log out from Supabase\n  supabase.auth.signOut();\n  // Clear session data from localStorage\n  localStorage.removeItem(\"token\");\n  delete apiClient.defaults.headers.common[\"Authorization\"];\n};\n\n// Verify user's email using a token\nexport const verifyEmail = async (token) => {\n  try {\n    const response = await apiClient.post(\"/auth/verify-email\", { token });\n    return response.data;\n  } catch (error) {\n    // Log the error and throw a detailed error message\n    console.error(\"Email Verification Error:\", error.response?.data || error.message);\n    throw error.response?.data || { message: \"Email verification failed\" };\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}