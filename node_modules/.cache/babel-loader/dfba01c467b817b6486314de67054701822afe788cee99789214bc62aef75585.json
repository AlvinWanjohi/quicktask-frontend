{"ast":null,"code":"import axios from \"axios\";\nimport { supabase } from \"../supabaseClient\";\nconst API_URL = process.env.REACT_APP_API_URL || \"https://vafwurwclfsusyymptsa.supabase.co/rest/v1\";\nconst SUPABASE_API_KEY = process.env.REACT_APP_SUPABASE_ANON_KEY;\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"apikey\": SUPABASE_API_KEY\n  }\n});\nconst getAuthToken = async () => {\n  var _data$session;\n  const {\n    data,\n    error\n  } = await supabase.auth.getSession();\n  if (error) {\n    console.error(\"Error fetching user session:\", error.message);\n    return null;\n  }\n  return ((_data$session = data.session) === null || _data$session === void 0 ? void 0 : _data$session.access_token) || SUPABASE_API_KEY;\n};\nconst handleApiError = (error, defaultMessage) => {\n  if (error.response) {\n    console.error(`${defaultMessage}:`, error.response.data);\n    throw new Error(error.response.data.message || defaultMessage);\n  } else if (error.request) {\n    console.error(`${defaultMessage}: No response from server`, error.request);\n    throw new Error(\"No response from server. Please check your network.\");\n  } else {\n    console.error(`${defaultMessage}:`, error.message);\n    throw new Error(error.message);\n  }\n};\nexport const getTasks = async () => {\n  try {\n    const token = await getAuthToken();\n    const response = await apiClient.get(\"/tasks\", {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    handleApiError(error, \"Failed to fetch tasks\");\n  }\n};\nexport const getTaskById = async taskId => {\n  try {\n    const token = await getAuthToken();\n    const response = await apiClient.get(`/tasks/${taskId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    handleApiError(error, `Failed to fetch task with ID: ${taskId}`);\n  }\n};\nexport const createTask = async taskData => {\n  try {\n    const token = await getAuthToken();\n    const response = await apiClient.post(\"/tasks\", taskData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    handleApiError(error, \"Failed to create task\");\n  }\n};\nexport const deleteTask = async taskId => {\n  try {\n    const token = await getAuthToken();\n    const response = await apiClient.delete(`/tasks/${taskId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    handleApiError(error, `Failed to delete task with ID: ${taskId}`);\n  }\n};\nexport const getBidsByTaskId = async taskId => {\n  try {\n    const token = await getAuthToken();\n    const response = await apiClient.get(`/tasks/${taskId}/bids`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    handleApiError(error, `Failed to fetch bids for task ID: ${taskId}`);\n  }\n};\nexport const submitBid = async (taskId, bidAmount) => {\n  try {\n    const token = await getAuthToken();\n    const response = await apiClient.post(`/tasks/${taskId}/bids`, {\n      bidAmount\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    handleApiError(error, `Failed to place bid on task ID: ${taskId}`);\n  }\n};\nexport const acceptBid = async bidId => {\n  try {\n    const token = await getAuthToken();\n    const response = await apiClient.patch(`/bids/${bidId}/accept`, {}, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    handleApiError(error, `Failed to accept bid ID: ${bidId}`);\n  }\n};","map":{"version":3,"names":["axios","supabase","API_URL","process","env","REACT_APP_API_URL","SUPABASE_API_KEY","REACT_APP_SUPABASE_ANON_KEY","apiClient","create","baseURL","headers","getAuthToken","_data$session","data","error","auth","getSession","console","message","session","access_token","handleApiError","defaultMessage","response","Error","request","getTasks","token","get","Authorization","getTaskById","taskId","createTask","taskData","post","deleteTask","delete","getBidsByTaskId","submitBid","bidAmount","acceptBid","bidId","patch"],"sources":["/home/alvin/Documents/quicktask-frontend/src/services/taskService.js"],"sourcesContent":["import axios from \"axios\";\nimport { supabase } from \"../supabaseClient\";\n\n\nconst API_URL = process.env.REACT_APP_API_URL || \"https://vafwurwclfsusyymptsa.supabase.co/rest/v1\";\nconst SUPABASE_API_KEY = process.env.REACT_APP_SUPABASE_ANON_KEY;\n\n\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"apikey\": SUPABASE_API_KEY, \n  },\n});\n\n\nconst getAuthToken = async () => {\n  const { data, error } = await supabase.auth.getSession();\n  if (error) {\n    console.error(\"Error fetching user session:\", error.message);\n    return null;\n  }\n  return data.session?.access_token || SUPABASE_API_KEY; \n};\n\n\nconst handleApiError = (error, defaultMessage) => {\n  if (error.response) {\n    console.error(`${defaultMessage}:`, error.response.data);\n    throw new Error(error.response.data.message || defaultMessage);\n  } else if (error.request) {\n    console.error(`${defaultMessage}: No response from server`, error.request);\n    throw new Error(\"No response from server. Please check your network.\");\n  } else {\n    console.error(`${defaultMessage}:`, error.message);\n    throw new Error(error.message);\n  }\n};\n\n\nexport const getTasks = async () => {\n  try {\n    const token = await getAuthToken();\n    const response = await apiClient.get(\"/tasks\", {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return response.data;\n  } catch (error) {\n    handleApiError(error, \"Failed to fetch tasks\");\n  }\n};\n\n\nexport const getTaskById = async (taskId) => {\n  try {\n    const token = await getAuthToken();\n    const response = await apiClient.get(`/tasks/${taskId}`, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return response.data;\n  } catch (error) {\n    handleApiError(error, `Failed to fetch task with ID: ${taskId}`);\n  }\n};\n\n\nexport const createTask = async (taskData) => {\n  try {\n    const token = await getAuthToken();\n    const response = await apiClient.post(\"/tasks\", taskData, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return response.data;\n  } catch (error) {\n    handleApiError(error, \"Failed to create task\");\n  }\n};\n\n\nexport const deleteTask = async (taskId) => {\n  try {\n    const token = await getAuthToken();\n    const response = await apiClient.delete(`/tasks/${taskId}`, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return response.data;\n  } catch (error) {\n    handleApiError(error, `Failed to delete task with ID: ${taskId}`);\n  }\n};\n\n\nexport const getBidsByTaskId = async (taskId) => {\n  try {\n    const token = await getAuthToken();\n    const response = await apiClient.get(`/tasks/${taskId}/bids`, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return response.data;\n  } catch (error) {\n    handleApiError(error, `Failed to fetch bids for task ID: ${taskId}`);\n  }\n};\n\n\nexport const submitBid = async (taskId, bidAmount) => {\n  try {\n    const token = await getAuthToken();\n    const response = await apiClient.post(\n      `/tasks/${taskId}/bids`,\n      { bidAmount },\n      { headers: { Authorization: `Bearer ${token}` } }\n    );\n    return response.data;\n  } catch (error) {\n    handleApiError(error, `Failed to place bid on task ID: ${taskId}`);\n  }\n};\n\nexport const acceptBid = async (bidId) => {\n  try {\n    const token = await getAuthToken();\n    const response = await apiClient.patch(\n      `/bids/${bidId}/accept`,\n      {},\n      { headers: { Authorization: `Bearer ${token}` } }\n    );\n    return response.data;\n  } catch (error) {\n    handleApiError(error, `Failed to accept bid ID: ${bidId}`);\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}