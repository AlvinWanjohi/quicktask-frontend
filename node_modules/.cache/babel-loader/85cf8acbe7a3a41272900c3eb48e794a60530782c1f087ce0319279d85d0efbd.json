{"ast":null,"code":"import apiClient, { setAuthToken } from \"../utils/apiClient\";\nimport supabase from \"../utils/supabaseClient\"; // Ensure Supabase client is properly configured\n\n// Register a new user & store JWT\nexport const registerUser = async userData => {\n  try {\n    const {\n      fullName,\n      email,\n      password,\n      profilePhoto,\n      location\n    } = userData;\n\n    // Supabase user registration\n    const {\n      data,\n      error: registerError\n    } = await supabase.auth.signUp({\n      email,\n      password\n    });\n    if (registerError) {\n      throw registerError;\n    }\n    const user = data === null || data === void 0 ? void 0 : data.user;\n    const session = data === null || data === void 0 ? void 0 : data.session;\n\n    // Handle Profile Photo Upload\n    let profilePhotoUrl = null;\n    if (profilePhoto && user !== null && user !== void 0 && user.id) {\n      const fileExt = profilePhoto.name.split(\".\").pop();\n      const filePath = `${user.id}/profile.${fileExt}`;\n      const {\n        data: uploadData,\n        error: uploadError\n      } = await supabase.storage.from(\"avatars\").upload(filePath, profilePhoto);\n      if (uploadError) {\n        throw uploadError;\n      }\n      profilePhotoUrl = uploadData !== null && uploadData !== void 0 && uploadData.path ? `${supabase.storageUrl}/avatars/${uploadData.path}` : null;\n\n      // Update user profile in Supabase\n      const {\n        error: updateError\n      } = await supabase.from(\"users\").update({\n        fullName,\n        location,\n        profilePhoto: profilePhotoUrl\n      }).eq(\"id\", user.id);\n      if (updateError) {\n        throw updateError;\n      }\n    }\n\n    // Store JWT token after registration\n    if (session !== null && session !== void 0 && session.access_token) {\n      setAuthToken(session.access_token); // Securely set token\n    }\n\n    // Notify backend to mark profile as completed\n    if (user !== null && user !== void 0 && user.id) {\n      await apiClient.put(`/users/${user.id}`, {\n        profileCompleted: true\n      });\n    }\n    return {\n      user,\n      access_token: session === null || session === void 0 ? void 0 : session.access_token,\n      message: \"Registration successful!\"\n    };\n  } catch (error) {\n    console.error(\"Registration Error:\", error.message);\n    throw error.message || {\n      message: \"Registration failed\"\n    };\n  }\n};\n\n// Log in a user and store JWT\nexport const loginUser = async credentials => {\n  try {\n    const {\n      email,\n      password\n    } = credentials;\n    const {\n      data,\n      error: loginError\n    } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    if (loginError) {\n      throw loginError;\n    }\n    const user = data === null || data === void 0 ? void 0 : data.user;\n    const session = data === null || data === void 0 ? void 0 : data.session;\n    if (session !== null && session !== void 0 && session.access_token) {\n      setAuthToken(session.access_token);\n    }\n    return {\n      user,\n      access_token: session === null || session === void 0 ? void 0 : session.access_token\n    };\n  } catch (error) {\n    console.error(\"Login Error:\", error.message);\n    throw error.message || {\n      message: \"Login failed\"\n    };\n  }\n};\n\n// Social login (Google, Facebook, etc.) with JWT storage\nexport const socialLogin = async provider => {\n  try {\n    const {\n      data,\n      error: socialLoginError\n    } = await supabase.auth.signInWithOAuth({\n      provider\n    });\n    if (socialLoginError) {\n      throw socialLoginError;\n    }\n    const user = data === null || data === void 0 ? void 0 : data.user;\n    const session = data === null || data === void 0 ? void 0 : data.session;\n    if (session !== null && session !== void 0 && session.access_token) {\n      setAuthToken(session.access_token);\n    }\n    return {\n      user,\n      access_token: session === null || session === void 0 ? void 0 : session.access_token\n    };\n  } catch (error) {\n    console.error(\"Social Login Error:\", error.message);\n    throw error.message || {\n      message: \"Social login failed\"\n    };\n  }\n};\n\n// Log out the user & clear token\nexport const logoutUser = () => {\n  supabase.auth.signOut();\n  setAuthToken(null);\n};\n\n// Verify user's email\nexport const verifyEmail = async token => {\n  try {\n    const response = await apiClient.post(\"/auth/verify-email\", {\n      token\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Email Verification Error:\", error.message);\n    throw error.message || {\n      message: \"Email verification failed\"\n    };\n  }\n};","map":{"version":3,"names":["apiClient","setAuthToken","supabase","registerUser","userData","fullName","email","password","profilePhoto","location","data","error","registerError","auth","signUp","user","session","profilePhotoUrl","id","fileExt","name","split","pop","filePath","uploadData","uploadError","storage","from","upload","path","storageUrl","updateError","update","eq","access_token","put","profileCompleted","message","console","loginUser","credentials","loginError","signInWithPassword","socialLogin","provider","socialLoginError","signInWithOAuth","logoutUser","signOut","verifyEmail","token","response","post"],"sources":["/home/alvin/Documents/quicktask-frontend/src/services/authService.js"],"sourcesContent":["import apiClient, { setAuthToken } from \"../utils/apiClient\";\nimport supabase from \"../utils/supabaseClient\"; // Ensure Supabase client is properly configured\n\n// Register a new user & store JWT\nexport const registerUser = async (userData) => {\n  try {\n    const { fullName, email, password, profilePhoto, location } = userData;\n\n    // Supabase user registration\n    const { data, error: registerError } = await supabase.auth.signUp({\n      email,\n      password,\n    });\n\n    if (registerError) {\n      throw registerError;\n    }\n\n    const user = data?.user;\n    const session = data?.session;\n\n    // Handle Profile Photo Upload\n    let profilePhotoUrl = null;\n    if (profilePhoto && user?.id) {\n      const fileExt = profilePhoto.name.split(\".\").pop();\n      const filePath = `${user.id}/profile.${fileExt}`;\n      const { data: uploadData, error: uploadError } = await supabase.storage\n        .from(\"avatars\")\n        .upload(filePath, profilePhoto);\n\n      if (uploadError) {\n        throw uploadError;\n      }\n\n      profilePhotoUrl = uploadData?.path\n        ? `${supabase.storageUrl}/avatars/${uploadData.path}`\n        : null;\n\n      // Update user profile in Supabase\n      const { error: updateError } = await supabase\n        .from(\"users\")\n        .update({ fullName, location, profilePhoto: profilePhotoUrl })\n        .eq(\"id\", user.id);\n\n      if (updateError) {\n        throw updateError;\n      }\n    }\n\n    // Store JWT token after registration\n    if (session?.access_token) {\n      setAuthToken(session.access_token); // Securely set token\n    }\n\n    // Notify backend to mark profile as completed\n    if (user?.id) {\n      await apiClient.put(`/users/${user.id}`, { profileCompleted: true });\n    }\n\n    return { user, access_token: session?.access_token, message: \"Registration successful!\" };\n  } catch (error) {\n    console.error(\"Registration Error:\", error.message);\n    throw error.message || { message: \"Registration failed\" };\n  }\n};\n\n// Log in a user and store JWT\nexport const loginUser = async (credentials) => {\n  try {\n    const { email, password } = credentials;\n    const { data, error: loginError } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n\n    if (loginError) {\n      throw loginError;\n    }\n\n    const user = data?.user;\n    const session = data?.session;\n\n    if (session?.access_token) {\n      setAuthToken(session.access_token);\n    }\n\n    return { user, access_token: session?.access_token };\n  } catch (error) {\n    console.error(\"Login Error:\", error.message);\n    throw error.message || { message: \"Login failed\" };\n  }\n};\n\n// Social login (Google, Facebook, etc.) with JWT storage\nexport const socialLogin = async (provider) => {\n  try {\n    const { data, error: socialLoginError } = await supabase.auth.signInWithOAuth({\n      provider,\n    });\n\n    if (socialLoginError) {\n      throw socialLoginError;\n    }\n\n    const user = data?.user;\n    const session = data?.session;\n\n    if (session?.access_token) {\n      setAuthToken(session.access_token);\n    }\n\n    return { user, access_token: session?.access_token };\n  } catch (error) {\n    console.error(\"Social Login Error:\", error.message);\n    throw error.message || { message: \"Social login failed\" };\n  }\n};\n\n// Log out the user & clear token\nexport const logoutUser = () => {\n  supabase.auth.signOut();\n  setAuthToken(null);\n};\n\n// Verify user's email\nexport const verifyEmail = async (token) => {\n  try {\n    const response = await apiClient.post(\"/auth/verify-email\", { token });\n    return response.data;\n  } catch (error) {\n    console.error(\"Email Verification Error:\", error.message);\n    throw error.message || { message: \"Email verification failed\" };\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}