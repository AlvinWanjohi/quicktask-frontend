{"ast":null,"code":"var _jsxFileName = \"/home/alvin/Documents/quicktask-frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { registerUser, loginUser, logoutUser } from \"../services/authService\";\n\n// Create auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// AuthProvider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate(); // Hook for redirection\n\n  // On mount, check if the user is already logged in (using localStorage)\n  useEffect(() => {\n    checkUserLoggedIn();\n  }, []);\n  const checkUserLoggedIn = async () => {\n    try {\n      const token = localStorage.getItem(\"authToken\");\n      const storedUser = localStorage.getItem(\"user\");\n\n      // Only set user if both token and user data exist.\n      if (token && storedUser) {\n        const parsedUser = JSON.parse(storedUser);\n        setUser(parsedUser);\n        console.log(\"User restored from localStorage:\", parsedUser);\n      }\n    } catch (error) {\n      console.error(\"Authentication check failed:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Login function (checks email & password, returns JWT)\n  const login = async credentials => {\n    try {\n      const response = await loginUser(credentials);\n      if (response.success) {\n        localStorage.setItem(\"authToken\", response.token);\n        localStorage.setItem(\"user\", JSON.stringify(response.user));\n        setUser(response.user);\n        console.log(\"User logged in:\", response.user);\n        navigate(\"/\"); // Redirect after login\n        return {\n          success: true\n        };\n      }\n      return {\n        success: false,\n        error: response.error\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: \"Login failed. Try again.\"\n      };\n    }\n  };\n\n  // Logout function: clears stored credentials and updates state\n  const logout = async () => {\n    try {\n      await logoutUser(); // Call backend logout function if needed\n      localStorage.removeItem(\"authToken\");\n      localStorage.removeItem(\"user\");\n      setUser(null);\n      console.log(\"User logged out\");\n      navigate(\"/login\"); // Redirect to login page\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n    }\n  };\n\n  // Register function: registers a new user and updates user state\n  const register = async userData => {\n    try {\n      const response = await registerUser(userData);\n      if (response.success) {\n        localStorage.setItem(\"authToken\", response.token);\n        localStorage.setItem(\"user\", JSON.stringify(response.user));\n        setUser(response.user);\n        console.log(\"User registered:\", response.user);\n        navigate(\"/\"); // Redirect after registration\n        return {\n          success: true\n        };\n      }\n      return {\n        success: false,\n        error: response.error\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: \"Registration failed. Try again.\"\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      login,\n      logout,\n      register,\n      setUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use AuthContext\n_s(AuthProvider, \"lk6viekuCMMpYORkLYLEq0Wsfds=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) throw new Error(\"useAuth must be used within an AuthProvider\");\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useNavigate","registerUser","loginUser","logoutUser","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","navigate","checkUserLoggedIn","token","localStorage","getItem","storedUser","parsedUser","JSON","parse","console","log","error","login","credentials","response","success","setItem","stringify","logout","removeItem","register","userData","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/home/alvin/Documents/quicktask-frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { registerUser, loginUser, logoutUser } from \"../services/authService\";\n\n// Create auth context\nexport const AuthContext = createContext();\n\n// AuthProvider component\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate(); // Hook for redirection\n\n  // On mount, check if the user is already logged in (using localStorage)\n  useEffect(() => {\n    checkUserLoggedIn();\n  }, []);\n\n  const checkUserLoggedIn = async () => {\n    try {\n      const token = localStorage.getItem(\"authToken\");\n      const storedUser = localStorage.getItem(\"user\");\n\n      // Only set user if both token and user data exist.\n      if (token && storedUser) {\n        const parsedUser = JSON.parse(storedUser);\n        setUser(parsedUser);\n        console.log(\"User restored from localStorage:\", parsedUser);\n      }\n    } catch (error) {\n      console.error(\"Authentication check failed:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Login function (checks email & password, returns JWT)\n  const login = async (credentials) => {\n    try {\n      const response = await loginUser(credentials);\n      if (response.success) {\n        localStorage.setItem(\"authToken\", response.token);\n        localStorage.setItem(\"user\", JSON.stringify(response.user));\n        setUser(response.user);\n        console.log(\"User logged in:\", response.user);\n        navigate(\"/\"); // Redirect after login\n        return { success: true };\n      }\n      return { success: false, error: response.error };\n    } catch (error) {\n      return { success: false, error: \"Login failed. Try again.\" };\n    }\n  };\n\n  // Logout function: clears stored credentials and updates state\n  const logout = async () => {\n    try {\n      await logoutUser(); // Call backend logout function if needed\n      localStorage.removeItem(\"authToken\");\n      localStorage.removeItem(\"user\");\n      setUser(null);\n      console.log(\"User logged out\");\n      navigate(\"/login\"); // Redirect to login page\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n    }\n  };\n\n  // Register function: registers a new user and updates user state\n  const register = async (userData) => {\n    try {\n      const response = await registerUser(userData);\n      if (response.success) {\n        localStorage.setItem(\"authToken\", response.token);\n        localStorage.setItem(\"user\", JSON.stringify(response.user));\n        setUser(response.user);\n        console.log(\"User registered:\", response.user);\n        navigate(\"/\"); // Redirect after registration\n        return { success: true };\n      }\n      return { success: false, error: response.error };\n    } catch (error) {\n      return { success: false, error: \"Registration failed. Try again.\" };\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, loading, login, logout, register, setUser }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Custom hook to use AuthContext\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) throw new Error(\"useAuth must be used within an AuthProvider\");\n  return context;\n};\n\nexport default AuthContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}