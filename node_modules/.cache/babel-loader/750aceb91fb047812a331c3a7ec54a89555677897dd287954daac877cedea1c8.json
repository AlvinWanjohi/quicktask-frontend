{"ast":null,"code":"var _jsxFileName = \"/home/alvin/Documents/quicktask-frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { registerUser, loginUser, logoutUser } from \"../services/authService\";\nimport { supabase } from \"../utils/supabaseClient\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [profile, setProfile] = useState(null);\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n  const createProfile = async (userId, email) => {\n    try {\n      var _userData$user$user_m;\n      // Fetch user details from Supabase auth\n      const {\n        data: userData,\n        error: userError\n      } = await supabase.auth.getUser();\n      if (userError || !userData || !userData.user) {\n        console.error(\"Error fetching user data:\", userError);\n        return;\n      }\n      const userName = ((_userData$user$user_m = userData.user.user_metadata) === null || _userData$user$user_m === void 0 ? void 0 : _userData$user$user_m.full_name) || \"New User\";\n      const {\n        data,\n        error\n      } = await supabase.from(\"profiles\").insert([{\n        id: userId,\n        email: email,\n        name: userName // Use actual name or fallback to \"New User\"\n      }]);\n      if (error) {\n        console.error(\"Error creating profile:\", error);\n      } else {\n        console.log(\"Profile created:\", data);\n      }\n    } catch (err) {\n      console.error(\"Unexpected error creating profile:\", err);\n    }\n  };\n  useEffect(() => {\n    const fetchUserProfileAndTasks = async () => {\n      const {\n        data: userData,\n        error: userError\n      } = await supabase.auth.getUser();\n      if (userError || !(userData !== null && userData !== void 0 && userData.user)) {\n        console.error(\"Error fetching user:\", userError);\n        return;\n      }\n      const userId = userData.user.id;\n      const userEmail = userData.user.email;\n      const {\n        data: profileData,\n        error: profileError\n      } = await supabase.from(\"profiles\").select(\"*\").eq(\"id\", userId).maybeSingle();\n      if (profileError) {\n        console.error(\"Error fetching profile:\", profileError);\n        return;\n      }\n      if (!profileData) {\n        console.warn(\"No profile found, creating one...\");\n        await createProfile(userId, userEmail);\n      } else {\n        console.log(\"Profile found:\", profileData);\n        setProfile(profileData);\n      }\n    };\n    fetchUserProfileAndTasks();\n  }, []);\n  const getAuthToken = () => localStorage.getItem(\"token\");\n  useEffect(() => {\n    checkUserLoggedIn();\n  }, []);\n  const checkUserLoggedIn = async () => {\n    try {\n      const token = getAuthToken();\n      const storedUser = localStorage.getItem(\"user\");\n      if (token && storedUser) {\n        setUser(JSON.parse(storedUser));\n        console.log(\"User restored from localStorage:\", JSON.parse(storedUser));\n      } else {\n        setUser(null);\n      }\n    } catch (error) {\n      console.error(\"Authentication check failed:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async credentials => {\n    try {\n      const response = await loginUser(credentials);\n      if (response.user && response.access_token) {\n        localStorage.setItem(\"token\", response.access_token);\n        localStorage.setItem(\"user\", JSON.stringify(response.user));\n        setUser(response.user);\n        console.log(\"User logged in:\", response.user);\n        navigate(\"/\");\n        return {\n          success: true\n        };\n      }\n      return {\n        success: false,\n        error: response.error\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: \"Login failed. Try again.\"\n      };\n    }\n  };\n  const logout = async () => {\n    try {\n      await logoutUser();\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"user\");\n      setUser(null);\n      setProfile(null);\n      setTasks([]);\n      console.log(\"User logged out\");\n      navigate(\"/login\");\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n    }\n  };\n  const register = async userData => {\n    try {\n      const {\n        user,\n        error\n      } = await supabase.auth.signUp({\n        email: userData.email,\n        password: userData.password\n      });\n      if (error) {\n        console.error(\"Signup error:\", error);\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n      if (user) {\n        await supabase.from(\"profiles\").insert([{\n          id: user.id,\n          email: user.email\n        }]);\n        console.log(\"Profile created for new user:\", user.id);\n      }\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: \"Registration failed. Try again.\"\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      profile,\n      tasks,\n      loading,\n      login,\n      logout,\n      register,\n      setUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"XGveN6cI6QFwoosY4Y6mxqKAi8E=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) throw new Error(\"useAuth must be used within an AuthProvider\");\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useNavigate","registerUser","loginUser","logoutUser","supabase","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","profile","setProfile","tasks","setTasks","loading","setLoading","navigate","createProfile","userId","email","_userData$user$user_m","data","userData","error","userError","auth","getUser","console","userName","user_metadata","full_name","from","insert","id","name","log","err","fetchUserProfileAndTasks","userEmail","profileData","profileError","select","eq","maybeSingle","warn","getAuthToken","localStorage","getItem","checkUserLoggedIn","token","storedUser","JSON","parse","login","credentials","response","access_token","setItem","stringify","success","logout","removeItem","register","signUp","password","message","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/home/alvin/Documents/quicktask-frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { registerUser, loginUser, logoutUser } from \"../services/authService\";\nimport { supabase } from \"../utils/supabaseClient\";\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [profile, setProfile] = useState(null);\n  const [tasks, setTasks] = useState([]); \n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  const createProfile = async (userId, email) => {\n    try {\n      // Fetch user details from Supabase auth\n      const { data: userData, error: userError } = await supabase.auth.getUser();\n      \n      if (userError || !userData || !userData.user) {\n        console.error(\"Error fetching user data:\", userError);\n        return;\n      }\n  \n      const userName = userData.user.user_metadata?.full_name || \"New User\";\n\n      const { data, error } = await supabase\n        .from(\"profiles\")\n        .insert([{ \n          id: userId, \n          email: email, \n          name: userName // Use actual name or fallback to \"New User\"\n        }]);\n  \n      if (error) {\n        console.error(\"Error creating profile:\", error);\n      } else {\n        console.log(\"Profile created:\", data);\n      }\n  \n    } catch (err) {\n      console.error(\"Unexpected error creating profile:\", err);\n    }\n  };\n  \n  \n  \n  useEffect(() => {\n    const fetchUserProfileAndTasks = async () => {\n      const { data: userData, error: userError } = await supabase.auth.getUser();\n      if (userError || !userData?.user) {\n        console.error(\"Error fetching user:\", userError);\n        return;\n      }\n  \n      const userId = userData.user.id;\n      const userEmail = userData.user.email;\n  \n      const { data: profileData, error: profileError } = await supabase\n        .from(\"profiles\")\n        .select(\"*\")\n        .eq(\"id\", userId)\n        .maybeSingle(); \n  \n      if (profileError) {\n        console.error(\"Error fetching profile:\", profileError);\n        return;\n      }\n  \n      if (!profileData) {\n        console.warn(\"No profile found, creating one...\");\n        await createProfile(userId, userEmail);\n      } else {\n        console.log(\"Profile found:\", profileData);\n        setProfile(profileData);\n      }\n    };\n  \n    fetchUserProfileAndTasks();\n  }, []);\n  \n  \n  const getAuthToken = () => localStorage.getItem(\"token\");\n\n  useEffect(() => {\n    checkUserLoggedIn();\n  }, []);\n\n  const checkUserLoggedIn = async () => {\n    try {\n      const token = getAuthToken();\n      const storedUser = localStorage.getItem(\"user\");\n\n      if (token && storedUser) {\n        setUser(JSON.parse(storedUser));\n        console.log(\"User restored from localStorage:\", JSON.parse(storedUser));\n      } else {\n        setUser(null);\n      }\n    } catch (error) {\n      console.error(\"Authentication check failed:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (credentials) => {\n    try {\n      const response = await loginUser(credentials);\n      if (response.user && response.access_token) {\n        localStorage.setItem(\"token\", response.access_token);\n        localStorage.setItem(\"user\", JSON.stringify(response.user));\n        setUser(response.user);\n        console.log(\"User logged in:\", response.user);\n        navigate(\"/\");\n        return { success: true };\n      }\n      return { success: false, error: response.error };\n    } catch (error) {\n      return { success: false, error: \"Login failed. Try again.\" };\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await logoutUser();\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"user\");\n      setUser(null);\n      setProfile(null);\n      setTasks([]); \n      console.log(\"User logged out\");\n      navigate(\"/login\");\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      const { user, error } = await supabase.auth.signUp({\n        email: userData.email,\n        password: userData.password,\n      });\n  \n      if (error) {\n        console.error(\"Signup error:\", error);\n        return { success: false, error: error.message };\n      }\n  \n      if (user) {\n        await supabase.from(\"profiles\").insert([{ id: user.id, email: user.email }]);\n        console.log(\"Profile created for new user:\", user.id);\n      }\n  \n      return { success: true };\n    } catch (error) {\n      return { success: false, error: \"Registration failed. Try again.\" };\n    }\n  };\n  \n\n  return (\n    <AuthContext.Provider value={{ user, profile, tasks, loading, login, logout, register, setUser }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) throw new Error(\"useAuth must be used within an AuthProvider\");\n  return context;\n};\n\nexport default AuthContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}